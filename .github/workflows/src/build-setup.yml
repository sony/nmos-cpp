- name: install conan
  if: matrix.use_conan == true
  run: |
    pip install conan

- name: install cmake
  uses: lukka/get-cmake@v3.17.1

- name: setup bash path
  working-directory: ${{ env.GITHUB_WORKSPACE }}
  shell: bash
  run: |
    # translate GITHUB_WORKSPACE into a bash path from a windows path
    workspace_dir=`pwd`
    echo "::set-env name=GITHUB_WORKSPACE_BASH::${workspace_dir}"

- name: windows setup
  if: runner.os == 'Windows'
  run: |
    # set compiler to cl.exe to avoid building with gcc.
    echo "::set-env name=CMAKE_EXTRA_ARGS::${{ env.CMAKE_EXTRA_ARGS }} -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe"
    # disable unused network interface
    netsh interface set interface name="vEthernet (nat)" admin=DISABLED
    # get host IP address
    $env:hostip = (
      Get-NetIPConfiguration |
      Where-Object {
          $_.IPv4DefaultGateway -ne $null -and
          $_.NetAdapter.Status -ne "Disconnected"
      }
    ).IPv4Address.IPAddress
    echo "::set-env name=HOST_IP_ADDRESS::$env:hostip"
    ipconfig
    # add the CRL Distribution Point to hosts so that it's discoverable when runing the AMWA test suite in mDNS mode
    # and avoid SSL Error: WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED failed to check revocation status.
    Add-Content $env:WINDIR\System32\Drivers\Etc\Hosts "`n$env:hostip crl.testsuite.nmos.tv`n"
    # add nmos-api.local to hosts to workaround mDNS lookups on windows being very slow and causing the AMWA test suite to take 2-3 hours to complete
    Add-Content $env:WINDIR\System32\Drivers\Etc\Hosts "`n$env:hostip nmos-api.local`n"
    # add nmos-mocks.local to hosts to workaround mDNS lookups on windows being very slow and causing the AMWA test suite IS-04-01 test_05 to fail due to latency messing up the apparent heart beat interval
    Add-Content $env:WINDIR\System32\Drivers\Etc\Hosts "`n$env:hostip nmos-mocks.local`n"
    # Configure SCHANNEL, e.g. to disable TLS 1.0 and TLS 1.1
    reg import ${{ env.GITHUB_WORKSPACE }}/Sandbox/configure_schannel.reg

- name: windows install bonjour
  if: runner.os == 'Windows'
  run: |
    # download bonjour installer
    curl -L https://download.info.apple.com/Mac_OS_X/061-8098.20100603.gthyu/BonjourPSSetup.exe -o BonjourPSSetup.exe -q
    & 7z.exe e BonjourPSSetup.exe Bonjour64.msi -y
    msiexec /i ${{ env.GITHUB_WORKSPACE }}\Bonjour64.msi /qn /norestart

- name: mac setup
  if: runner.os == 'macOS'
  run: |
    hostip=$(ipconfig getifaddr en0)
    echo "::set-env name=HOST_IP_ADDRESS::$hostip"
    ifconfig
    echo "::set-env name=CTEST_EXTRA_ARGS::$CTEST_EXTRA_ARGS -E testMdnsResolveAPIs"
    echo "::set-env name=CTEST_EXPECTED_FAILURES::$CTEST_EXPECTED_FAILURES -R testMdnsResolveAPIs"
    # add the CRL Distribution Point to hosts so that it's discoverable when runing the AMWA test suite in mDNS mode
    echo "$hostip crl.testsuite.nmos.tv" | sudo tee -a /etc/hosts
    # testssl.sh needs "timeout"
    brew install coreutils

- name: mac docker install
  # installs docker on a mac runner. Github's documentation states docker is already available so this shouldn't be necessary
  # can be used to run AWMA test suite but test suite doesn't seem to be able to communicate with nodes running on the host
  if: false
  run: |
    brew install docker docker-compose docker-machine xhyve docker-machine-driver-xhyve
    sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
    sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
    mkdir -p /Users/runner/.docker/machine/cache/
    # workaround "docker-machine" failing to download boot2docker.iso
    curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso
    i=0
    while ! docker-machine "--github-api-token=${{ secrets.GITHUB_TOKEN }}" create default --driver xhyve; do
      docker-machine rm -f default
      sleep 1
      $(( i++ ))
      if [[ $i -gt 5 ]]; then
        exit 1
      fi
    done
    eval $(docker-machine env default)
    echo "::set-env name=DOCKER_MACHINE_NAME::$DOCKER_MACHINE_NAME"
    echo "::set-env name=DOCKER_TLS_VERIFY::$DOCKER_TLS_VERIFY"
    echo "::set-env name=DOCKER_HOST::$DOCKER_HOST"
    echo "::set-env name=DOCKER_CERT_PATH::$DOCKER_CERT_PATH"


- name: ubuntu setup
  if: runner.os == 'Linux'
  run: |
    sudo ip addr flush dev docker0 || echo "remove docker ip failed"
    hostip=$(hostname -I | cut -f1 -d' ')
    echo "::set-env name=HOST_IP_ADDRESS::$hostip"
    ip address
    # add the CRL Distribution Point to hosts so that it's discoverable when runing the AMWA test suite in mDNS mode
    echo "$hostip crl.testsuite.nmos.tv" | sudo tee -a /etc/hosts

- name: ubuntu mdns install
  if: runner.os == 'Linux' && matrix.install_mdns == true
  run: |
    cd ${{ env.GITHUB_WORKSPACE }}
    curl https://opensource.apple.com/tarballs/mDNSResponder/mDNSResponder-878.200.35.tar.gz -o mDNSResponder-878.200.35.tar.gz
    tar -xzf mDNSResponder-878.200.35.tar.gz
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/unicast.patch
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/permit-over-long-service-types.patch
    patch -d mDNSResponder-878.200.35/ -p1 < ${{ env.GITHUB_WORKSPACE }}/Development/third_party/mDNSResponder/poll-rather-than-select.patch
    cd mDNSResponder-878.200.35/mDNSPosix
    make os=linux && sudo make os=linux install
    # install Name Service Cache Daemon to speed up repeated mDNS name discovery
    sudo apt-get install -f nscd
    if [ -f /.dockerenv ]; then
      # nscd doesn't run automatically under docker
      mkdir -p /var/run/nscd
      nscd
    fi

- name: ubuntu non-conan setup
  if: runner.os == 'Linux' && matrix.use_conan == false
  run: |
    sudo apt-get install -y \
      libboost-chrono-dev \
      libboost-date-time-dev \
      libboost-regex-dev \
      libboost-system-dev \
      libboost-thread-dev \
      libboost-random-dev \
      libboost-filesystem-dev \
      openssl \
      libssl-dev

    cd ${{ env.RUNNER_WORKSPACE }}
    git clone --recurse-submodules --branch v2.10.16 https://github.com/Microsoft/cpprestsdk
    cd cpprestsdk/Release
    mkdir build
    cd build
    cmake .. -DCMAKE_BUILD_TYPE:STRING="Release" -DWERROR:BOOL="0" -DBUILD_SAMPLES:BOOL="0" -DBUILD_TESTS:BOOL="0"
    make -j 2 && sudo make install

    echo "::set-env name=CMAKE_EXTRA_ARGS::${{ env.CMAKE_EXTRA_ARGS }} -DWEBSOCKETPP_INCLUDE_DIR:PATH=\"${{ env.RUNNER_WORKSPACE }}/cpprestsdk/Release/libs/websocketpp\""

- name: disable conan
  if: matrix.use_conan == false
  run: |
    echo "::set-env name=CMAKE_EXTRA_ARGS::${{ env.CMAKE_EXTRA_ARGS }} -DUSE_CONAN:BOOL=\"0\""

- name: ubuntu avahi setup
  if: runner.os == 'Linux' && matrix.install_mdns == false
  run: |
    sudo apt-get install -f libavahi-compat-libdnssd-dev libnss-mdns avahi-utils
    echo "::set-env name=CTEST_EXTRA_ARGS::$CTEST_EXTRA_ARGS -E testMdnsAdvertiseAddress"
    echo "::set-env name=CTEST_EXPECTED_FAILURES::$CTEST_EXPECTED_FAILURES -R testMdnsAdvertiseAddress"
    # make avahi only respond on the "eth0" interface
    sudo sed -i 's/#*allow-interfaces=.*/allow-interfaces=eth0/g' /etc/avahi/avahi-daemon.conf
    sudo systemctl restart avahi-daemon
    # install Name Service Cache Daemon to speed up repeated mDNS name discovery
    sudo apt-get install -f nscd

